pipeline {
    agent any 
    
      environment {
        KUBECONFIG = credentials('kubeconfig_id')
    }
    tools {
        maven "M2_HOME"
        jdk "JAVA_HOME"
    }
    stages {
        
         

        
        
        stage('Fetch code') {
            steps {
                git branch: 'main',
                credentialsId: 'fa500f0a-c585-42c9-8a1d-5cc5f8b8b104',
                url: 'https://gitlab.com/dhieff.14/springkube.git'
            }
        }
      
                
        
 
                
        stage('Maven clean') {
            steps {
                script {
                    def repoPath = "LoginKube"
                    sh "cd ${repoPath} && mvn clean"
                }
            }
        }

        stage('Maven package and finalizing') {
            steps {
                script {
                    def repoPath = "LoginKube"
                    sh "cd ${repoPath} && mvn package"
                }
            }
        }
        
        
                
                stage('Code Quality Check via SonarQube') {
                    steps {
                        script {
                            dir('LoginKube') {
                                withSonarQubeEnv(credentialsId: 'jenkins_token', installationName: 'sonar') {
                                    sh 'mvn sonar:sonar'
                                }
                            }
                        }
                    }
        
                    
                }

        stage('Build Docker Image') {
            steps {
            script {
                def repoPath = "LoginKube"
                def imageName = "khalil73/spring-kube:latest"
                sh "cd ${repoPath} && docker build -t ${imageName} ."
                }
            }
        }
        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    def imageName = "khalil73/spring-kube:latest"
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_id', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        sh "docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}"
                    }
                    sh "docker push ${imageName}"
                }
            }
        }
        stage('Test Kubernetes Connection') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'kubeconfig_id', variable: 'KUBECONFIG_FILE')]) {
                        writeFile file: 'test-k8s-connection.sh', text: '''
                        #!/bin/bash
                        export KUBECONFIG=${KUBECONFIG_FILE}
                        kubectl get nodes
                        result=$?
                        if [ $result -ne 0 ]; then
                            echo "Failed to connect to Kubernetes cluster"
                            exit $result
                        else
                            echo "Successfully connected to Kubernetes cluster"
                        fi
                        '''
                        sh 'chmod +x test-k8s-connection.sh'
                        sh './test-k8s-connection.sh'
                    }
                }
            }
        }
        
        
        
         stage('Apply Kubernetes Deployment') {
             steps {
                withCredentials([string(credentialsId: 'vagrant-ssh-password', variable: 'SSHPASS')]) {
                    sh '''
                            sshpass -p "$SSHPASS" ssh -o StrictHostKeyChecking=no vagrant@192.168.100.10 << EOF 
                            cd
                            ls
                            cd deployments 
                            ls
                            sudo kubectl apply -f test.yaml
                        '''
                }}
        }
        
        
        
        
}
}



